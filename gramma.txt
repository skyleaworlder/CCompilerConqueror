~ 许多 $ 符号只是为了人工消除左递归
~ 这样就减轻了程序的负担
!letter -> int | float | double | void | if | else | while | return | + | - | * | / | = | < | > | <= | >= | == | != | += | -= | *= | /= | ( | ) | { | } | ; | , | <ID> | <INT>

S -> Program

~ about int a; void func() {}
~ 声明
Program -> GlbDefList
GlbDefList -> GlbDef GlbDefList | $
GlbDef     -> Type <ID> ; | Type FuncTop Block FuncTop1

~ 函数定义
FuncTop -> <ID> FuncTop2 ( VarList )
VarList -> Param , VarList | Param | $
Param   -> Type <ID>
FuncTop1 -> $
FuncTop2 -> $

~ StsList is sentence list
~ 块定义: 变量定义 / 语句
Block   -> Block1 { DefList StsList }
DefList -> Def DefList | $
StsList -> Sts StsList | $
Def     -> Type DefVariable ;
DefVariable -> <ID> | <ID> = Expression
Sts     -> Expression ; | RetSts | IfBlock | WhileBlock
Block1  -> $

RetSts  -> return Expression ;
IfBlock -> if IfBlock1 ( Expression ) IfBlock2 Block IfElse
IfElse  -> $ | IfElse1 else Block
WhileBlock  -> while WhileBlock1 ( Expression ) WhileBlock2 Block
IfBlock1 -> $
IfBlock2 -> $
IfElse1 -> $
WhileBlock1 -> $
WhileBlock2 -> $


~ 表达式相关 Expression 无分号
Expression -> <ID> Assign Expression | Expression Operator Expression | ( Expression ) | <ID> ( Arguments1 Arguments ) | <ID> | <INT> | $
Arguments -> Expression , Arguments | Expression | $
Arguments1 -> $

~ 直接推导终结符
Type -> int | float | double | void
Operator -> + | - | * | / | < | > | <= | >= | == | !=
Assign  -> = | += | -= | *= | /=
